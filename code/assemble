#!/usr/bin/env node

// Assemble final raw picture under direction of assemble.json
// Run code/forejson to download a forecast and create assemble.json

fs = require('fs')

OUTPUT_FILE = 'rawimage/display.raw'
assJSON = fs.readFileSync('assemble.json')
ass = JSON.parse(assJSON)

main = function() {
  ass.map(function(row){row.reverse()})
  var rows = hcat(ass.map(vcat))
  rows = rows.map(make800)
  fs.writeFileSync(OUTPUT_FILE, Buffer.concat(rows))
  console.warn("Wrote RAW file to", OUTPUT_FILE)
}

// 800 pixels of white.
whiteout = Buffer(Array(801).join('\xff\xff'), 'ascii')
make800 = function(row) {
  // 800 pixels == 1600 bytes.
  var extendedRow = Buffer.concat([row, whiteout])
  return extendedRow.slice(0, 1600)
}
    

// Horizontal Concatenate list of lists.
hcat = function(l) {
  rows = []
  while(l[0].length > 0) {
    var list = l.map(function(stack){return stack.shift()})
    var row = Buffer.concat(list)
    rows.push(row)
  }
  return rows
}

// Vertical Concatenate list of files.
// A list of list of bytes is returned.
// For now each file is assumed to be 300 bytes per row.
// :todo: relax this 300 byte per row assumption.
vcat = function(l) {
  var lists = l.map(readRows)
  var flat = flatten(lists)
  return flat
}


// Flatten list of lists into a plain list.
flatten = function(l) {
  var flat = []
  flat = flat.concat.apply(flat, l)
  return flat
}

// Read a file into a list of rows.
readRows = function(name) {
  var buf, bpr
  if(typeof name == 'string') {
    bpr = fs.statSync(name).size/150
  } else {
    var l = name
    bpr = l[1]
    name = l[0]
  }
  buf = fs.readFileSync(name)

  var res = []
  while(buf.length > 0) {
    res.push(buf.slice(0, bpr))
    buf = buf.slice(bpr)
  }
  return res
}

main()

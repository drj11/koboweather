#!/usr/bin/env node

// Convert forecast in input file 'forecast.json' to
// output file 'assemble.json'. The output is essentially a
// sequence of raw pictures to be assembled.

OUTPUT_FILE = "assemble.json"

fs = require('fs')
path = require('path')

request = require('request')

option = JSON.parse(fs.readFileSync('settings.json'))
var URL
LOCATION = option.location


makeAssemble = function(list, option) {
  var rows = []
  var row = []
  var time = []
  var i
  for(i=0; i<list.length; ++i) {
    var hour = list[i].time.split(/[ T]/)[1].slice(0,5)
    hour = hour.replace(':', '')
    row.push(list[i].icon)
    time.push(path.join("rawimage", hour + '.raw'))
    if (row.length >= 4) {
      rows.push(row)
      rows.push(time)
      row = []
      time = []
    }
  }
  var location = option.location || LOCATION
  rows.push([[path.join("rawimage", location + '.raw'), 220]])
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(rows))
}

openweathermapImageFile = function(weatherId) {
    var filename
    while (true) {
      filename = path.join("rawimage", weatherId + '.raw')
      if(fs.existsSync(filename)) {
        break
      }
      weatherId = weatherId.slice(0, -1)
      if (weatherId.length == 0) {
        filename = path.join("rawimage", "default.raw")
        break
      }
    }
    return filename
}

requestJSON = function(cb) {
  request(URL, function(error, response, body) {
    if(error) {
      throw error
    }
    if(response.statusCode != 200) {
      throw response.statusCode
    }
    fs.writeFileSync('forecast.json', body)
    cb()
  })
}

arg = process.argv.slice(2)

var offline = false
var provider = option.provider || 'openweathermap.org'

while(arg.length > 0) {
  if(arg[0] == '--offline') {
    offline = true
    arg.shift()
  } else if(arg[0] == '--provider') {
    provider = arg[1]
    arg = arg.slice(2)
  } else if(arg[0] == '--') {
    arg.shift()
    break
  } else if(arg[0].match(/^-/)) {
    usage()
    sys.exit()
  } else {
    break
  }
}

PROVIDER = require('./' + provider)
console.log(provider)
URL = PROVIDER.url(option)

if(offline) {
  PROVIDER.read(makeAssemble)
} else {
  requestJSON(function() {
    PROVIDER.read(makeAssemble)
  })
}

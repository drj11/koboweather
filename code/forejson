#!/usr/bin/env node

// Convert forecast in input file 'forecast.json' to
// output file 'assemble.json'. The output is essentially a
// sequence of raw pictures to be assembled.

OUTPUT_FILE = "assemble.json"

fs = require('fs')
path = require('path')

request = require('request')

URL = 'http://api.openweathermap.org/data/2.5/forecast?id=2638077&cnt=1'

provider = require('./forecast.io')
option = JSON.parse(fs.readFileSync('settings.json'))
URL = provider.url(option)
LOCATION = option.location

READ = {}
READ['forecast.io'] = function(cb) {
  var json = fs.readFileSync('forecast.json')
  var forecast = JSON.parse(json)
  var rows = []
  var row = []
  var time = []
  var hourly = forecast.hourly.data.slice(0,24)
  hourly.map(function(x) {
      var date = new Date(x.time*1000)
      console.log(date.toISOString(), x.icon)
  })
  var o = summarise3H(hourly)
  var i
  for(i=0; i<o.length; ++i) {
    var filename = path.join("rawimage", o[i].icon + '.raw')
    if(fs.existsSync(filename)) {
      o[i].icon = filename
    } else {
      console.warn("No icon for " + o[i].icon)
      o[i].icon = 'rawimage/default.raw'
    }
  }
  console.log(o)
  cb(o, {})
}

// Summarise a list of hourlies into 3-hourly blocks.
summarise3H = function(hourly) {
  var res = []
  var i
  for(i=0; i<hourly.length; i+=3) {
    var slice = hourly.slice(i, i+3)
    var icon = simpleIcon(slice)
    var time = new Date(hourly[i].time*1000).toISOString()
    res.push({icon: icon, time: time})
  }
  return res
}

simpleIcon = function(l) {
  var simples = l.map(simplify)
  return majority(simples)
}
  

// Simplify the icon text.
simplify = function(obj) {
  var o = obj.icon
  var s = o
  // Remove first part of "partly-cloudy-night", and so on.
  s = s.replace(/partly-/, '')
  // Remove final "-day" or "-night".
  s = s.replace(/-(day|night)$/, '')
  return s
}

// Return the majority element of *l*.
majority = function(l) {
  l[2].failIfListTooShort
  var count = {}
  l.map(function(x) {
    count[x] |= 0
    count[x] += 1
  })
  for(el in count) {
    if(count[el] >= 2) {
      return el
    }
  }
  return el
}


READ['openweathermap.org'] = function(cb) {
  var json = fs.readFileSync('forecast.json')
  var forecast = JSON.parse(json)
  var simples = forecast.list.slice(0, 8).map(function(x) {
    var weatherId = String(x.weather[0].id)
    var filename = openweathermapImageFile(weatherId)
    return {time: x.dt_txt, icon: filename}
  })
  cb(simples, {location: forecast.city.name})
}

makeAssemble = function(list, option) {
  var rows = []
  var row = []
  var time = []
  var i
  for(i=0; i<list.length; ++i) {
    var hour = list[i].time.split(/[ T]/)[1].slice(0,5)
    hour = hour.replace(':', '')
    row.push(list[i].icon)
    time.push(path.join("rawimage", hour + '.raw'))
    if (row.length >= 4) {
      rows.push(row)
      rows.push(time)
      row = []
      time = []
    }
  }
  var location = option.location || LOCATION
  rows.push([[path.join("rawimage", location + '.raw'), 220]])
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(rows))
}

openweathermapImageFile = function(weatherId) {
    var filename
    while (true) {
      filename = path.join("rawimage", weatherId + '.raw')
      if(fs.existsSync(filename)) {
        break
      }
      weatherId = weatherId.slice(0, -1)
      if (weatherId.length == 0) {
        filename = path.join("rawimage", "default.raw")
        break
      }
    }
    return filename
}

requestJSON = function(cb) {
  request(URL, function(error, response, body) {
    if(error) {
      throw error
    }
    if(response.statusCode != 200) {
      throw response.statusCode
    }
    fs.writeFileSync('forecast.json', body)
    cb()
  })
}

readJSON = READ['forecast.io']

arg = process.argv.slice(2)

if(arg.length > 0 && arg[0] == '--offline') {
  readJSON(makeAssemble)
} else {
  requestJSON(function() {
    readJSON(makeAssemble)
  })
}

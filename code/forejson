#!/usr/bin/env node

// Convert forecast in input file 'forecast.json' to
// output file 'assemble.json'. The output is essentially a
// sequence of raw pictures to be assembled.

OUTPUT_FILE = "assemble.json"

fs = require('fs')
path = require('path')

request = require('request')

URL = 'http://api.openweathermap.org/data/2.5/forecast?id=2638077&cnt=1'

readJSON = function() {
  json = fs.readFileSync('forecast.json')
  forecast = JSON.parse(json)
  rows = []
  row = []
  time = []
  forecast.list.slice(0, 8).map(function(x) {
    var weatherId = String(x.weather[0].id)
    var hour = x.dt_txt.split(' ')[1].slice(0,5)
    hour = hour.replace(':', '')
    var filename
    while (true) {
      filename = path.join("rawimage", weatherId + '.raw')
      if(fs.existsSync(filename)) {
        break
      }
      weatherId = weatherId.slice(0, -1)
      if (weatherId.length == 0) {
        filename = path.join("rawimage", "default.raw")
        break
      }
    }
    row.push(filename)
    time.push(path.join("rawimage", hour + '.raw'))
    if (row.length >= 4) {
      rows.push(row)
      rows.push(time)
      row = []
      time = []
    }
  })
  var location = forecast.city.name
  rows.push([[path.join("rawimage", location + '.raw'), 220]])
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(rows))
}

requestJSON = function(cb) {
  request(URL, function(error, response, body) {
    if(error) {
      throw error
    }
    if(response.statusCode != 200) {
      throw response.statusCode
    }
    fs.writeFileSync('forecast.json', body)
    cb()
  })
}

arg = process.argv.slice(2)

if(arg.length > 0 && arg[0] == '--offline') {
  readJSON()
} else {
  requestJSON(readJSON)
}
